// Generated by CoffeeScript 1.11.0
(function() {
  var slice = [].slice;

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
      return module.exports = factory(require('lodash'), require('q').defer, require('najax'));
    } else if (root.angular) {
      return root.angular.module('hybind', []).factory('hybind', [
        '$q', '$http', function(q, http) {
          var req;
          req = function(opts) {
            var d;
            d = q.defer();
            http(opts).then(function(res) {
              return d.resolve(res.data, res);
            });
            return d.promise;
          };
          return factory(root.angular, q.defer, req);
        }
      ]);
    } else {
      return root.hybind = factory(root.jQuery || root.$);
    }
  })(this, function(fw, deferred, http) {
    var clean, extend, hybind, makeUrl, promise, selfLink, str;
    extend = fw.extend;
    promise = deferred ? function(d) {
      return d.promise;
    } : function(d) {
      return d.promise();
    };
    if (deferred == null) {
      deferred = fw.Deferred;
    }
    if (http == null) {
      http = fw.ajax;
    }
    selfLink = function(obj) {
      var ref1;
      return obj != null ? (ref1 = obj.$bind) != null ? ref1.self : void 0 : void 0;
    };
    clean = function(url) {
      if (url) {
        return url.replace(/{.*}/g, '');
      }
    };
    str = function(obj) {
      return JSON.stringify(obj, function(k, v) {
        if (k === "" || !(v != null ? v.$bind : void 0)) {
          return v;
        }
      });
    };
    makeUrl = function(baseUrl, pathOrUrl) {
      if (!pathOrUrl) {
        return;
      }
      if (baseUrl.slice(-1) !== '/') {
        baseUrl += '/';
      }
      if (pathOrUrl.indexOf(':') === -1) {
        return baseUrl + pathOrUrl;
      } else {
        return pathOrUrl;
      }
    };
    hybind = function(url, defaults) {
      var bind, collMapper, enrich, idFn, req, root;
      if (defaults == null) {
        defaults = {};
      }
      if (defaults.headers == null) {
        defaults.headers = {};
      }
      extend(defaults.headers, {
        Accept: 'application/json'
      });
      idFn = function() {
        return null;
      };
      bind = function(item) {
        var link, name, p, ref1, ref2, self;
        if (item != null ? item._links : void 0) {
          ref1 = item._links;
          for (name in ref1) {
            link = ref1[name];
            self = null;
            if (name !== 'self') {
              if (((ref2 = item.$bind) != null ? ref2.self : void 0) !== clean(link.href)) {
                p = item[name] || (item[name] = {});
                item.$bind(p, link.href);
                bind(item[name]);
              }
            } else {
              item.$bind.self = clean(link.href);
            }
          }
          return delete item._links;
        }
      };
      collMapper = function(obj, coll, opts) {
        var i, item, k, len, link, ref1, ref2, ref3, ref4, results, v;
        coll.length = 0;
        if (obj.page) {
          coll.$page = obj.page;
        }
        if (obj._embedded) {
          ref1 = obj._embedded;
          results = [];
          for (k in ref1) {
            v = ref1[k];
            for (i = 0, len = v.length; i < len; i++) {
              item = v[i];
              link = item != null ? (ref2 = item._links) != null ? (ref3 = ref2.self) != null ? ref3.href : void 0 : void 0 : void 0;
              coll.push(item);
              if (link) {
                enrich(item, link);
                item.$bind.ref = (coll != null ? (ref4 = coll.$bind) != null ? ref4.self : void 0 : void 0) + '/' + link.split('/').slice(-1);
              }
              bind(item);
            }
            break;
          }
          return results;
        }
      };
      req = function(r, params) {
        var d, k, opts, sep, v;
        d = deferred();
        opts = {};
        extend(opts, defaults);
        extend(opts, r);
        opts.headers = {};
        if (defaults.headers) {
          extend(opts.headers, defaults.headers);
        }
        if (r.headers) {
          extend(opts.headers, r.headers);
        }
        if (typeof opts.data === 'string') {
          extend(opts.headers, {
            'Content-Type': 'text/uri-list'
          });
        }
        if (typeof opts.data === 'object') {
          extend(opts.headers, {
            'Content-Type': 'application/json'
          });
          opts.data = str(opts.data);
        }
        if (params) {
          sep = opts.url.indexOf('?') === -1 ? '?' : '&';
          opts.url = opts.url + sep + ((function() {
            var results;
            results = [];
            for (k in params) {
              v = params[k];
              results.push(k + "=" + v);
            }
            return results;
          })()).join("&");
        }
        hybind.http(opts).then(function(data, s, r) {
          var e;
          try {
            if (typeof data === 'string' && data !== '') {
              data = JSON.parse(data);
            }
          } catch (error) {
            e = error;
            d.reject(e);
          }
          return d.resolve(data);
        }, d.reject);
        return promise(d);
      };
      enrich = function(obj, url) {
        var base, removeLink;
        obj.$bind = function() {
          var arg, args, link, pathOrUrl, prev, prop, ref, ref1, ref2, ref3, target;
          args = Array.prototype.slice.call(arguments);
          arg = args[0];
          if (typeof arg === 'object') {
            target = arg;
            args.shift();
          } else {
            prop = arg;
            prev = (ref1 = obj[prop]) != null ? (ref2 = ref1.$bind) != null ? ref2.ref : void 0 : void 0;
            target = obj[prop] || (obj[prop] = {});
          }
          link = args[0];
          if (typeof link === 'function') {
            link = link(target);
          }
          if (link === void 0) {
            link = idFn(target);
          }
          arg = args[1];
          if (typeof arg === 'object') {
            target = arg;
            if (prop) {
              obj[prop] = target;
            }
            args.shift();
          }
          pathOrUrl = args[1];
          if (pathOrUrl == null) {
            pathOrUrl = link;
          }
          pathOrUrl = clean(pathOrUrl);
          ref = prev || clean(makeUrl(selfLink(obj), pathOrUrl));
          if (!target.$bind) {
            if (!pathOrUrl) {
              throw 'No property or id specified';
            }
            return enrich(target, ref);
          } else {
            if (obj instanceof Array) {
              target.$bind.ref = (obj != null ? (ref3 = obj.$bind) != null ? ref3.self : void 0 : void 0) + '/' + target.$bind.self.split('/').slice(-1);
            } else {
              target.$bind.ref = ref;
            }
            return target;
          }
        };
        if (url) {
          obj.$bind.ref = clean(url);
          if ((base = obj.$bind).self == null) {
            base.self = obj.$bind.ref;
          }
        }
        obj.$load = function(params, opts) {
          var d;
          d = deferred();
          req({
            method: 'GET',
            url: obj.$bind.ref
          }, params).then(function(data) {
            var prop;
            if (obj instanceof Array) {
              collMapper(data, obj, opts);
            } else {
              for (prop in obj) {
                if (typeof obj[prop] !== 'function') {
                  obj[prop] = void 0;
                }
              }
              extend(obj, data);
              bind(obj);
            }
            return d.resolve(obj);
          }, d.reject);
          return promise(d);
        };
        if (obj instanceof Array) {
          obj.$add = function(items) {
            var data, item;
            if (!(items instanceof Array)) {
              items = [items];
            }
            data = (function() {
              var i, len, results;
              results = [];
              for (i = 0, len = items.length; i < len; i++) {
                item = items[i];
                results.push(selfLink(item));
              }
              return results;
            })();
            return req({
              method: 'POST',
              url: selfLink(obj),
              data: data.join('\n')
            });
          };
        } else {
          obj.$set = function(item) {
            if (item == null) {
              item = obj;
            }
            return req({
              method: 'PUT',
              url: obj.$bind.ref,
              data: selfLink(item)
            });
          };
        }
        obj.$save = function() {
          return req({
            method: 'PUT',
            url: selfLink(obj),
            data: obj
          });
        };
        obj.$create = function(item) {
          var d;
          d = deferred();
          req({
            method: 'POST',
            url: selfLink(obj),
            data: item || {}
          }).then(function(data) {
            if (item) {
              extend(item, data);
            }
            if (item == null) {
              item = data;
            }
            enrich(item, data._links.self.href);
            delete item._links;
            return d.resolve(item);
          }, d.reject);
          return promise(d);
        };
        obj.$delete = function() {
          if (obj.$bind.self) {
            return req({
              method: 'DELETE',
              url: obj.$bind.self
            });
          } else {
            return obj.$load().then(function() {
              return req({
                method: 'DELETE',
                url: obj.$bind.self
              });
            });
          }
        };
        removeLink = selfLink(obj);
        obj.$remove = function() {
          return req({
            method: 'DELETE',
            url: obj.$bind.ref
          });
        };
        obj.$share = function() {
          var arg, args, cache, cached, cb, item, link, prop;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          while (args.length > 0) {
            arg = args.shift();
            switch (typeof arg) {
              case 'string':
                prop = arg;
                break;
              case 'object':
                cache = arg;
                break;
              case 'function':
                cb = arg;
            }
          }
          item = prop ? obj[prop] : obj;
          link = selfLink(item);
          if (cache == null) {
            cache = defaults != null ? defaults.cache : void 0;
          }
          cached = cache[link];
          if (prop && cached) {
            obj[prop] = cached;
          }
          if (!cached) {
            cache[link] = item;
          }
          if (cb && !cached) {
            cb(item);
          }
          return item;
        };
        return obj;
      };
      root = {
        $id: function(fn) {
          return idFn = fn;
        }
      };
      return enrich(root, url);
    };
    hybind.http = http;
    return hybind;
  });

}).call(this);
